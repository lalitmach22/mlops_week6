name: Build and Deploy Iris API to GKE

on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps
env:
  GCP_PROJECT_ID: mlopsweek1
  GKE_CLUSTER: your-gke-cluster-name # ❗ Replace with your GKE cluster name
  GKE_ZONE: us-central1              # ❗ Replace with your GKE cluster zone/location
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPO_NAME: iris-repo               # ❗ Your Artifact Registry repository name
  IMAGE_NAME: iris-api
  MODEL_BUCKET_URI: gs://mlops-course-mlopsweek1-unique/path/to/your/model.joblib # ❗ Update this path

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    # Add 'id-token' with 'write' permission for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID' # ❗ Replace with your WIF provider
        service_account: 'your-service-account-email@...iam.gserviceaccount.com' # ❗ Replace with your SA email

    - name: Download Model from GCS
      run: |-
        echo "Downloading model from ${MODEL_BUCKET_URI}"
        gcloud storage cp "${MODEL_BUCKET_URI}" ./api/model.joblib

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

    - name: Build and Push Docker image
      run: |-
        docker build -t ${{ env.ARTI"FACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest ./api
        docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy to GKE
      run: |-
        # This command applies the configuration. If the deployment exists, it will be updated.
        kubectl apply -f deployment.yaml

    - name: Create CML Report
      env:
        # This token is provided by Actions, you don't need to create a secret
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Wait for the Load Balancer to get an external IP
        echo "Waiting for external IP..."
        sleep 60 # Wait for 60 seconds
        EXTERNAL_IP=$(kubectl get service iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        echo "## ✅ Deployment Successful" > report.md
        echo " " >> report.md
        echo "A new version of the Iris API has been deployed." >> report.md
        echo "- **Commit:** [${GITHUB_SHA::7}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})" >> report.md
        echo "- **API Endpoint:** http://$EXTERNAL_IP" >> report.md
        echo " " >> report.md
        echo "### Test with cURL:" >> report.md
        echo "\`\`\`bash" >> report.md
        echo "curl -X 'POST' 'http://$EXTERNAL_IP/predict' -H 'Content-Type: application/json' -d '{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}'" >> report.md
        echo "\`\`\`" >> report.md

        # Post the report as a comment on the commit
        cml comment create report.md
