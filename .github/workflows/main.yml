name: Build and Deploy Iris API to GKE

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps
env:
  GCP_PROJECT_ID: mlopsweek1
  GKE_CLUSTER: mlopsweek6
  GKE_ZONE: us-central1-a
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPO_NAME: iris-repo
  IMAGE_NAME: iris-api
  MODEL_BUCKET_URI: gs://mlops-course-mlopsweek1-unique/my-models/iris-classifier-week-1/model.joblib

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20 # Prevent runaway jobs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Decode base64 GCP credentials
      run: |
        echo "🔐 Decoding GCP credentials..."
        echo "${{ secrets.GCP_SA_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/gcp-key.json
        echo "✅ Credentials file created."

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ github.workspace }}/gcp-key.json'

    - name: Download Model from GCS
      run: |
        echo "📥 Downloading model from ${{ env.MODEL_BUCKET_URI }}"
        gcloud storage cp "${{ env.MODEL_BUCKET_URI }}" ./api/model.joblib
        echo "✅ Model downloaded successfully."

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: |
        echo "🐳 Configuring Docker for Artifact Registry..."
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        echo "✅ Docker configured."

    - name: Build and Push Docker Image
      run: |
        echo "🔨 Building Docker image..."
        # Use commit SHA for better traceability
        IMAGE_TAG_SHA="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        IMAGE_TAG_LATEST="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest"
        
        # Build the image with both tags
        docker build -t "$IMAGE_TAG_SHA" -t "$IMAGE_TAG_LATEST" .
        
        echo "📤 Pushing Docker images..."
        docker push "$IMAGE_TAG_SHA"
        docker push "$IMAGE_TAG_LATEST"
        
        echo "✅ Docker images built and pushed successfully."
        # Export the SHA tag for use in the deployment step
        echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_ENV

    - name: Deploy to GKE
      run: |
        echo "🚀 Deploying to GKE..."
        
        # Update deployment.yaml to use the specific SHA image tag for traceability
        echo "🔄 Updating image tag to use SHA: ${{ env.IMAGE_TAG_SHA }}"
        sed -i "s|image: .*|image: ${{ env.IMAGE_TAG_SHA }}|g" deployment.yaml
        
        echo "📋 Applying updated deployment file:"
        cat deployment.yaml
        
        # Apply the deployment with the updated image
        kubectl apply -f deployment.yaml
        
        echo "⏳ Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/iris-api-deployment --timeout=300s
        echo "✅ Deployment completed successfully."

    - name: Wait for LoadBalancer and Create CML Report
      env:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📋 Installing CML..."
        pip install cml
        
        echo "⏳ Waiting for LoadBalancer to get an external IP..."
        EXTERNAL_IP=""
        for i in {1..12}; do
          sleep 30
          EXTERNAL_IP=$(kubectl get service iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "✅ External IP obtained: $EXTERNAL_IP"
            break
          fi
          echo "🔍 Attempt $i: Still waiting for external IP..."
        done
        
        if [ -z "$EXTERNAL_IP" ]; then
          echo "❌ Failed to get external IP after 6 minutes."
          exit 1
        fi
        
        echo "📝 Creating CML report..."
        echo "## ✅ Deployment Successful" > report.md
        echo "A new version of the Iris API has been deployed." >> report.md
        echo "- **Commit:** [${GITHUB_SHA::7}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})" >> report.md
        echo "- **Image Tag:** \`${{ env.IMAGE_TAG_SHA }}\`" >> report.md
        echo "- **API Endpoint:** http://$EXTERNAL_IP" >> report.md
        echo " " >> report.md
        echo "### Test with cURL:" >> report.md
        echo "\`\`\`bash" >> report.md
        echo "curl -X 'POST' 'http://$EXTERNAL_IP/predict/' -H 'Content-Type: application/json' -d '{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}'" >> report.md
        echo "\`\`\`" >> report.md

        cml comment create report.md
        echo "✅ CML report created and posted."

    - name: Cleanup credentials
      if: always()
      run: |
        echo "🧹 Cleaning up credentials file..."
        rm -f ${{ github.workspace }}/gcp-key.json
        echo "✅ Cleanup completed."
