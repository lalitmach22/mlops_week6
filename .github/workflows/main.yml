name: Build and Deploy Iris API to GKE

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps
env:
  GCP_PROJECT_ID: mlopsweek1
  GKE_CLUSTER: mlopsweek6
  GKE_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPO_NAME: iris-repo
  IMAGE_NAME: iris-api
  MODEL_BUCKET_URI: gs://mlops-course-mlopsweek1-unique/my-models/iris-classifier-week-1/model.joblib

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 20 # Prevent runaway jobs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Decode GCP service account key
      run: |
        echo "🔐 Decoding GCP credentials..."
        echo "${{ secrets.GCP_SA_KEY_B64 }}" | base64 --decode > gcp-key.json
        echo "✅ Credentials file created."

    - name: Authenticate with GCP
      run: |
        gcloud auth activate-service-account --key-file=gcp-key.json
        echo "✅ GCP authenticated."

    - name: Download Model from GCS
      run: |
        echo "📥 Downloading model from ${{ env.MODEL_BUCKET_URI }}"
        gcloud storage cp "${{ env.MODEL_BUCKET_URI }}" ./api/model.joblib
        echo "✅ Model downloaded successfully."

    - name: Set up GKE credentials
      run: |
        echo "🔗 Configuring kubectl for GKE cluster..."
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }} --project ${{ env.GCP_PROJECT_ID }}
        echo "✅ GKE credentials configured."
        
        echo "🔧 Ensuring telemetry service account exists..."
        # Check if service account exists, create if not
        if ! kubectl get serviceaccount telemetry-access &>/dev/null; then
          echo "📝 Creating telemetry-access service account..."
          kubectl create serviceaccount telemetry-access
          echo "✅ Service account created."
        else
          echo "✅ Service account already exists."
        fi

    - name: Install gke-gcloud-auth-plugin
      run: |
        echo "🔧 Setting up Google Cloud APT repository..."
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        
        echo "🔧 Installing gke-gcloud-auth-plugin..."
        sudo apt-get update
        sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin
        echo "✅ gke-gcloud-auth-plugin installed."

    - name: Configure Docker for Artifact Registry
      run: |
        echo "🐳 Configuring Docker for Artifact Registry..."
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        echo "✅ Docker configured."

    - name: Build and Push Docker Image
      run: |
        echo "🔨 Building Docker image..."
        IMAGE_TAG_SHA="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        IMAGE_TAG_LATEST="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest"
        
        docker build -t "$IMAGE_TAG_SHA" -t "$IMAGE_TAG_LATEST" ./api
        
        echo "📤 Pushing Docker images..."
        docker push "$IMAGE_TAG_SHA"
        docker push "$IMAGE_TAG_LATEST"
        
        echo "✅ Docker images built and pushed."
        echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_ENV

    - name: Deploy to GKE
      run: |
        echo "🚀 Deploying to GKE..."
        
        # Update the image tag with the SHA-based tag for proper versioning
        echo "📝 Updating deployment image to: ${{ env.IMAGE_TAG_SHA }}"
        sed -i "s|image: us-central1-docker.pkg.dev/mlopsweek1/iris-repo/iris-api:.*|image: ${{ env.IMAGE_TAG_SHA }}|g" deployment.yaml
        
        # Verify the image tag was updated
        echo "🔍 Verifying image tag update:"
        grep "image: us-central1-docker.pkg.dev" deployment.yaml
        
        echo "📋 Applying Kubernetes manifest files..."
        # Apply each YAML file specifically with error handling
        kubectl apply -f deployment.yaml || { echo "❌ Failed to apply deployment.yaml"; exit 1; }
        kubectl apply -f service.yaml || { echo "❌ Failed to apply service.yaml"; exit 1; }
        kubectl apply -f hpa.yaml || { echo "❌ Failed to apply hpa.yaml"; exit 1; }
        
        echo "⏳ Waiting for deployment rollout to complete..."
        # Increase timeout to 8 minutes to account for startup probe
        if ! kubectl rollout status deployment/iris-api-deployment --timeout=480s; then
          echo "❌ Deployment rollout failed. Debugging information:"
          echo "� Deployment status:"
          kubectl get deployment iris-api-deployment -o wide
          echo "📦 Pod status:"
          kubectl get pods -l app=iris-api -o wide
          echo "📝 Recent events:"
          kubectl get events --sort-by=.metadata.creationTimestamp --field-selector involvedObject.kind=Pod | grep iris-api | tail -10
          echo "📜 Pod logs:"
          kubectl logs -l app=iris-api --tail=50 --timestamps || echo "No logs available"
          exit 1
        fi
        
        echo "🔍 Checking final pod status..."
        kubectl get pods -l app=iris-api
        
        echo "✅ Deployment completed successfully."

    - name: Install CML and Report Status
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install CML using npm
        echo "📋 Installing CML via npm..."
        npm install -g @dvcorg/cml
        
        echo "⏳ Waiting for LoadBalancer to get an external IP..."
        EXTERNAL_IP=""
        for i in {1..12}; do
          sleep 30
          EXTERNAL_IP=$(kubectl get service iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "✅ External IP obtained: $EXTERNAL_IP"
            break
          fi
          echo "🔍 Attempt $i: Still waiting for external IP..."
        done
        
        if [ -z "$EXTERNAL_IP" ]; then
          echo "❌ Failed to get external IP after 6 minutes."
          exit 1
        fi

        # Create a temporary file for the POST body
        echo '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}' > post.json

        # Install and run wrk for load testing
        echo "🏋️‍♀️ Running load test..."
        sudo apt-get install -y wrk
        LOAD_TEST_RESULTS=$(wrk -t4 -c100 -d5m -s ./wrk_script.lua http://$EXTERNAL_IP/predict/ | tee /dev/tty)
        
        echo "📝 Creating CML report..."
        echo "## ✅ Deployment Successful" > report.md
        echo "A new version of the Iris API has been deployed." >> report.md
        echo "- **Commit:** [${GITHUB_SHA::7}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})" >> report.md
        echo "- **Image Tag:** \`${{ env.IMAGE_TAG_SHA }}\`" >> report.md
        echo "- **API Endpoint:** http://$EXTERNAL_IP" >> report.md
        echo " " >> report.md
        echo "### 🔬 Load Test Results" >> report.md
        echo "\`\`\`" >> report.md
        echo "$LOAD_TEST_RESULTS" >> report.md
        echo "\`\`\`" >> report.md
        echo " " >> report.md
        echo "### Test with cURL:" >> report.md
        echo "\`\`\`bash" >> report.md
        echo "curl -X 'POST' 'http://$EXTERNAL_IP/predict/' -H 'Content-Type: application/json' -d '{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}'" >> report.md
        echo "\`\`\`" >> report.md

        # Use npx to run the CML command
        npx @dvcorg/cml comment create report.md
        echo "✅ CML report posted."

    - name: Cleanup credentials
      if: always()
      run: |
        echo "🧹 Cleaning up credentials file..."
        rm -f gcp-key.json
        echo "✅ Cleanup completed."
